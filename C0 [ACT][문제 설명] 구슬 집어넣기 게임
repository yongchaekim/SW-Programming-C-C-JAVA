철수의 동생이 다니는 학교에서는 ‘구슬 집어넣기 게임’이 선풍적인 인기를 끌고 있다. 철수 동생은 반 친구들과 이 게임의 성적을 놓고 경쟁을 하고 있다.
 어느 날, 철수의 동생이 시무룩한 얼굴을 하고 집에 들어왔다. 친구들보다 좋은 성적을 내지 못했다고 우울했던 것이다. 그래서 철수는 동생을 위해 게임에서 최고 성적을 내는 방법을 알려주는 프로그램을 만들기로 했다.
 게임은 다음 룰에 의해 진행된다.
 
1.게임판에는 빨간구슬, 파란구슬, 벽, 그리고 목표구멍이 있다.
2. 플레이어는 총 10회 게임판을 기울일 수 있다. (방향 : 상하좌우)
3. 플레이어가 게임판을 기울이게 되면 해당 방향으로 빨간구슬과 파란구슬이 한 칸 이동한다.
4. 이동방향에 벽이 있는 구슬은 움직일 수 없다.
5. 이동 시 빨간 구슬과 파란 구슬이 같은 위치로 움직여 부딪히는 경우 구슬이 깨지므로, 게임 실패다.
6. 파란구슬이 목표구멍으로 들어가는 것은 게임 실패다.
7. 기울임 횟수가 10회를 넘어서면 게임 실패다.
8. 빨간 구슬이 목표구멍으로 들어가는 것이 이 게임의 목표이다.
9. 적은 횟수를 기울여 해결할수록 많은 높은 점수를 얻을 수 있다.
 
기본적으로 게임판의 가장자리는 구슬이 게임판 밖으로 빠져나가지 못하도록 벽으로 둘러쌓여 있다.
 
철수는 우선 이 게임에서 문제를 해결할 수 있는 가장 적은 횟수를 알고 싶다. 이를 출력하는 프로그램을 작성하시오.
* 입출력 Template이 필요한 경우 C 제출은 다음 코드를 복사하여 코드를 작성하시오.
#include <stdio.h>
#define MAXN (15)
int R, C;//게임판 행(세로), 열(가로) 크기
char map[MAXN+5][MAXN+5];//게임판('#':벽, '.':빈공간, 'R':빨간구슬, 'B':파란구슬, 'H':목표구멍)

void InputData(void){
	scanf("%d %d", &R, &C);
	for (int i=0; i<R; i++){
		scanf("%s", map[i]);
	}
}
int main(void){
	int T, ans=-10;
	scanf("%d", &T);
	for (int i=0; i<T; i++){
		InputData();//입력

		//여기서부터 작성

		printf("%d\n", ans);//출력
	}
	return 0;
}
* 입출력 Template이 필요한 경우 C++ 제출은 다음 코드를 복사하여 코드를 작성하시오.
#include <iostream>
using namespace std;
#define MAXN (15)
int R, C;//게임판 행(세로), 열(가로) 크기
char map[MAXN+5][MAXN+5];//게임판('#':벽, '.':빈공간, 'R':빨간구슬, 'B':파란구슬, 'H':목표구멍)

void InputData(){
	cin >> R >> C;
	for (int i=0; i<R; i++){
		cin >> map[i];
	}
}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int T, ans=-10;
	cin >> T;
	for (int i=0; i<T; i++){
		InputData();//입력

		//여기서부터 작성

		cout << ans << "\n";//출력
	}
	return 0;
}
* 입출력 Template이 필요한 경우 Java 제출은 다음 코드를 복사하여 코드를 작성하시오.
import java.io.*;
import java.util.*;
public class Main {
	int R, C;//게임판 행(세로), 열(가로) 크기
	char map[][];//게임판('#':벽, '.':빈공간, 'R':빨간구슬, 'B':파란구슬, 'H':목표구멍)

	void InputData(BufferedReader bf) throws IOException{
		String str[] = bf.readLine().split(" ");
		R = Integer.parseInt(str[0]);
		C = Integer.parseInt(str[1]);
		map = new char[R][C];
		for (int i=0; i<R; i++){
			map[i] = bf.readLine().toCharArray();
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int T, ans=-10;
		T = Integer.parseInt(bf.readLine());
		for (int i=0; i<T; i++){
			m.InputData(bf);//입력

			// 여기서부터 작성

			bw.write(String.valueOf(ans) + "\n");//출력
		}
		bw.flush();
		bw.close();
		bf.close();
	}
}

입력 설명
첫 번째 줄에 테스트 케이스 개수 T(1≤T≤10)가 주어진다.
이후부터 T개의 테스트 케이스 셋트가 주어진다.
셋트의 첫 번째 줄에는 게임판의 행(R)과 열(C)이 순서대로 주어진다. (3<=R,C<=15)
셋트의 두 번째 줄부터 게임판의 행만큼 게임판의 상황이 주어진다.
(B – 파란구슬, R – 빨간구슬, . – 이동가능지역, # - 벽, H-목표구멍)
출력 설명
T줄에 걸쳐 각 테스트 케이스의 게임성공 최단 기울임 횟수를 출력하게 된다.
게임해결이 불가능한 경우 -1을 출력한다.
입력 예시
2
6 15
###############
#..#R#..B.....#
#..#.#.H......#
#....#.#......#
#.............#
###############
6 15
###############
#..#R#.B......#
#..#.#.H......#
#....#.#......#
#.............#
###############
출력 예시
8
9
