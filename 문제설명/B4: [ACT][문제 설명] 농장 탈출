소들은 농부 존의 농장을 탈출하는 대담한 계획을 세웠다. 그들은 작은 고무 보트를 구했고 한 밤중에 농장 경계에 흐르는 강을 보트를 타고 건너려는 계획이다. 그 계획은 완벽해 보였다. 작은 고무 보트가 소들의 무게를 견디지 못한다는 사실을 알기 전까지는…
 
N마리의 소(1≤N≤20)들의 무게는 각각 W_1, …, W_N이다. 보트가 침몰하지 않을 만큼 가벼운 소들을 선별해야 한다. 불행하게도, 소들은 산수를 못하기로 유명하다. 10진법을 사용하는 소들은 소들의 무게를 더하다가 자리올림이 발생하는 경우 그 소는 보트를 사용하기에는 너무 무거운 소라고 판단한다. 자리올림이 발생하지 않고 더할 수 있는 무게가 보트를 사용할 수 있는 가벼운 무게이다.
 
당신이 할 일은 소들을 도와서 보트를 탈 수 있는 소들의 최대 수를 구하는 것이다. 즉, 소들의 무게들을 모두 더했을 때 자리올림이 발생하지 않게 하는 소들의 최대 수를 구하는 것이다.
* 입출력 Template이 필요한 경우 C 제출은 다음 코드를 복사하여 코드를 작성하시오.
#include <stdio.h>
#define MAXN (20)
int N;
int W[MAXN+10];
void InputData(void){
    scanf("%d", &N);
    for (int i=0 ; i<N ; i++){
        scanf("%d", &W[i]);
    }
}

int main(void){
    int ans = -1;

    InputData();// 입력받는 부분

    // 여기서부터 작성

    printf("%d\n", ans);//출력하는 부분
    return 0;
}
* 입출력 Template이 필요한 경우 C++ 제출은 다음 코드를 복사하여 코드를 작성하시오.
#include <iostream>
using namespace std;
#define MAXN (20)
int N;
int W[MAXN+10];
void InputData(){
	cin >> N;
	for (int i=0 ; i<N ; i++){
		cin >> W[i];
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int ans = -1;

	InputData();// 입력받는 부분

	// 여기서부터 작성

	cout << ans << "\n";//출력하는 부분
	return 0;
}
* 입출력 Template이 필요한 경우 Java 제출은 다음 코드를 복사하여 코드를 작성하시오.
import java.io.*;
import java.util.*;
public class Main {
	int N;
	int W[];

	void InputData() throws IOException{
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(bf.readLine());
		W = new int[N];
		for (int i=0; i<N; i++){
			W[i] = Integer.parseInt(bf.readLine());
		}
		bf.close();
	}

	public static void main(String[] args) throws IOException {
		int ans = -1;
		Main m = new Main();
		m.InputData();//입력

		//여기서부터 작성

		//출력
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(String.valueOf(ans) + "\n");
		bw.flush();
		bw.close();
	}
}
* 입출력 Template이 필요한 경우 Python 제출은 다음 코드를 복사하여 코드를 작성하시오
import sys


def input_data():
    readl = sys.stdin.readline
    N = int(readl())
    weight = [int(readl()) for _ in range(N)]
    return N, weight

sol = -1
# 입력받는 부분
N, weight = input_data()

# 여기서부터 작성

# 출력하는 부분
print(sol)


입력 설명
첫 줄에 소들의 수 N(1≤N≤20)이 주어진다.
두 번째 줄부터 N 줄에 걸쳐 각 소의 무게(W_i)가 입력된다. (정수, 1≤W_i≤100,000,000)
출력 설명
무게를 모두 더했을 때 어떤 자리에서도 자리올림이 발생하지 않는 소들의 최대 수를 출력하라.
입력 예시
5
522
6
84
7311
19
출력 예시
3
부가정보
522 + 6 + 7311 = 7839, 세 마리 소의 무게를 더할 때 어떤 자리에서도 자리올림이 발생하지 않는다.
    522
      6
+ 7311
---------
  7839
