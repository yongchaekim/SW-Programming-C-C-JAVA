#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXN (30)

int L, R, C;
int sl, sr, sc, el, er, ec;
int rear;
int front;
char map[MAXN+10][MAXN+10][MAXN+10];

struct node {
	int l;
	int r;
	int c;
	int t;
};

struct node queue[MAXN*MAXN];


int InputData(void){
	scanf("%d %d %d", &L, &R, &C);
	if ((L == 0) && (R == 0) && (C == 0)) return 0; 
	memset(map, 0, sizeof(map));
	
	for (int l=1; l<=L;l++){
		for (int r=1; r<=R; r++){
			scanf("%s", &map[l][r][1]);
			for(int c=1; c<=C; c++) {
				if(map[l][r][c] == 'S') {
					sl = l; sr=r; sc=c;
					map[l][r][c] = '.';
				} else if(map[l][r][c] == 'E') {
					el = l; er = r; ec = c;
					map[l][r][c] = '.';
				}
			}
		}
	}
	return 1;
}



int BFS(void) {
	rear=front=0;
	int dl[]={0, 0, 0, 0, -1, 1}; //Level
	int dr[]={-1, 1, 0, 0, 0, 0}; // Row
	int dc[]= {0, 0, -1, 1, 0, 0}; // col
	
	//0. 시작, 도착 위치 찾기 
	struct node ele = {sl, sr, sc, 0};
	queue[rear] =ele;
	rear=(rear+1)%(MAXN*MAXN);
	map[sl][sr][sc] = '@';
	
	while(rear != front) {
		struct node deq = queue[front];
		front=(front+1)%(MAXN*MAXN);
		
		if((deq.l == el) && (deq.r == er) && (deq.c == ec)) return deq.t;
			 
		for(int i=0; i<6; i++) {
			if(map[deq.l+dl[i]][deq.r+dr[i]][deq.c+dc[i]] !='.') continue;
			map[deq.l+dl[i]][deq.r+dr[i]][deq.c+dc[i]] = '@';
			struct node ele = {deq.l+dl[i], deq.r+dr[i], deq.c+dc[i], deq.t+1};
			queue[rear] =ele;
			rear=(rear+1)%(MAXN*MAXN);
		}
	}
	return -1;
}

int main(void){
	int ans = -1;
	while(InputData()){

		//여기서부터 작성
		ans = BFS();

		if (ans == -1) printf("Trapped!\n");
		else printf("Escaped in %d minute(s).\n", ans);
	}
	return 0;
}
