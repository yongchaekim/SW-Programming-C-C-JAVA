#include <stdio.h>
#include <stdlib.h>

#define MAXN (10)
#define MAXM (100)
int N, M;//직원수, 상하관계개수
int s[MAXM+1];
int e[MAXM+1];
int bonus[MAXN+1];//보너스금액
int sol[MAXN+1];//실제지불
int cnt;
int used[MAXN+1];
int link[MAXN+1][MAXN+1]; // link[A][B] : A가 B의 상급자 

void InputData(void){
	scanf("%d %d", &N, &M);
	for (int i=0; i<M; i++){
		scanf("%d %d", &s[i], &e[i]);
	}
	for (int i=1; i<=N; i++){
		scanf("%d", &bonus[i]);
	}
}

int comp(const void* a, const void* b) {
	return *(int*)b - *(int*)a;
}

void OutputData(void){
	for (int i=1; i<=N; i++){
		printf("%d ", sol[i]);
	}
	printf("\n");
}

int Check(void) {
	for(int i=0; i<M; i++) {
		if(sol[s[i]] <= sol[e[i]]) {
			return 0;
		}
	}
	return 1;
}

int isPossible(int n, int b) {
	// 1~n-1 <-> 관계 b금액 배정 가능 여부?
	for(int i=1; i<n; i++) {
		if(n==i) continue;
		if(sol[i] == 0) continue;
		if(link[i][n] && sol[i] <= b) return 0;
		if(link[n][i] && sol[i] >= b) return 0;
	} 
	return 1;
}

void Init(void) {
	for(int i=0; i<M; i++) {
		link[s[i]][e[i]] = 1;
	}
}


int DFS(int n) {

	/*
	if(n > N) {
		return Check();
	}*/
	
	
	if(n>N) {
		return 1;
	}
	
	
	for(int i=2; i<=N; i++) {
		// n 번 사람 -> i번 보너스 배정 
		if(used[i]) continue;
		if(!isPossible(n, bonus[i])) continue;
		used[i]=1;
		sol[n] = bonus[i];
		if(DFS(n+1)) return 1;
		used[i]=0;
	}
	return 0;
}

void Solve(void) {

	// 1. bonus 배열 내림차순 정렬
	qsort(&bonus[1], N, sizeof(bonus[1]), comp);
	//2. 1번이 시장이므로 제일 큰 금액
	sol[1] = bonus[1];
	//3 2번 직원부터 N번 직원까지 보너스 금액 배정하는 모든 경우의 수 시도 DFS 
	//DFS(1, s[1], e[1]);
	used[1] = 1;
	Init();
	DFS(2);
}

int main(void){
	InputData();//입력받는 부분
	Solve();
	// 여기서부터 작성

	OutputData();// 출력하는 부분
	return 0;
}
